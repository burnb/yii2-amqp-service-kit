<?php

namespace app\commands;

use burn\amqpServiceKit\components\ServiceController;
use GuzzleHttp\Client;
use GuzzleHttp\Message\Response;

/**
 * Example processing messages
 *
 * @package app\commands
 */
class MainController extends ServiceController
{
    public $routingKey = 'example.example.example';
    public $exchangeName = 'example';
    public $queueName = 'example';
    public $serviceName = "EXAMPLE";
    public $apiBaseUrl;

    /**
     * @inheritdoc
     */
    public function init()
    {
        parent::init();
        $this->apiBaseUrl = \Yii::getAlias('@apiUrl', false) ?: $this->apiBaseUrl;
    }

    /**
     * @inheritdoc
     */
    public function actionMain()
    {
        if (!$this->apiBaseUrl) {
            throw new \UnexpectedValueException("Empty required param apiBaseUrl");
        }
        parent::actionMain();
    }

    /**
     * Example process by queue message
     *
     * @param \PhpAmqpLib\Message\AMQPMessage $msg
     * @return bool
     */
    public function process($msg)
    {
        /** @var \PhpAmqpLib\Channel\AMQPChannel $amqpChannel */
        $amqpChannel = $msg->delivery_info['channel'];
        try {
            if (parent::process($msg)) {
                if (isset($msg->body) && $someId = $msg->body) {
                    $client = new Client(['defaults' => ['verify' => YII_ENV_PROD]]);
                    /** @var Response $response */
                    $response = $client->post($this->apiBaseUrl . '/1.0/example', ['body' => ['someId' => $someId]]);
                    if ($response->getStatusCode() == 200 && json_decode($response->getBody())) {
                        $amqpChannel->basic_ack($msg->delivery_info['delivery_tag']);

                        return true;
                    } else {
                        $amqpChannel->basic_reject($msg->delivery_info['delivery_tag'], false);
                        $this->stderr("\r\n" . __CLASS__ . " MESSAGE $msg->body REJECTED AND REQUEUE");
                        \Yii::e("SERVICE: {$this->serviceName} | MESSAGE $msg->body REJECTED AND REQUEUE");
                    }
                } else {
                    $amqpChannel->basic_ack($msg->delivery_info['delivery_tag']);
                    $this->stderr("\r\n" . __CLASS__ . " ERROR! MESSAGE HAS NO someId");
                    \Yii::e("SERVICE: {$this->serviceName} | ERROR! MESSAGE HAS NO someId");
                }
            }
        } catch (\Exception $e) {
            $amqpChannel->basic_reject($msg->delivery_info['delivery_tag'], false);
            $this->stderr("\r\nERROR: {$e->getMessage()} \r\nTRACE: {$e->getTraceAsString()} " . __CLASS__ . " MESSAGE $msg->body REJECTED AND REQUEUE");
            \Yii::ex($e, "SERVICE: {$this->serviceName}\r\nMESSAGE $msg->body REJECTED AND REQUEUE\r\n");
        } finally {
            $this->consumed++;
        }

        return false;
    }

    /**
     * @inheritdoc
     */
    protected function finalize()
    {
        $this->channel->close();
        $this->connection->close();
        \Yii::$app->getDb()->close();

        parent::finalize();
    }
}